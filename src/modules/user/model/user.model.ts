import mongoose, { Document, Schema } from "mongoose";
import { bankDetailSchema, IBankDetail } from "./bankDetail.model";
import { Counter } from "./counter.model";

// import { autoIncrementPlugin } from "../../../config/autoIncrement.plugin";
// import { searchKeyFilterPlugin } from "../../../utils/mongoose.utils";

/**
 * Interface representing a user.
 */
export interface IUser {
  // _id?:string;
  firstName: string;
  lastName: string;
  phone?: string;
  email: string;
  password?:string;
  path?: string;
  uniqueId?: number;
  createdAt?: Date;
  updatedAt?: Date;
  searchKey?: string;
  referalCode?: string;
  isApproved?: boolean;
  parentPath?: string;
  direction?: string;
  profilePath?: string;
  bankDetail?: IBankDetail;
  walletBalance?:number
  totalEarning?:number;
  isSuperUser?:boolean;
}

/**
 * Interface for the Mongoose model of a user.
 */
export interface IUserModel extends IUser, Document {}

const userSchema: Schema = new Schema<IUser>(
  {
    firstName: { type: String, required: true },
    lastName: { type: String, required: true },
    password:{type:String, require:true},
    phone: { type: String , required: true, unique: true},
    email: { type: String, required: true, unique: true },
    parentPath: { type: String, required: true },
    searchKey: { type: String }, // optional: can be generated by plugin
    referalCode: {type:String, require:true, unique:true},
    isApproved:{type:Boolean,default:false},
    direction:{type:String, required:true},
    profilePath:{type:String, required:true},
    bankDetail: { type: bankDetailSchema, default: {} },
    uniqueId:{ type: Number, unique: true },
    walletBalance:{type:Number, default:0},
    totalEarning:{type:Number, default:0},
    isSuperUser:{type:Boolean, default:false}
  },
  {
    timestamps: true, // adds createdAt and updatedAt
  }
);

// Auto-increment for uniqueId
// userSchema.plugin(autoIncrementPlugin, { modelName: "user" });

// Search key plugin (e.g., for indexed searching by email or uniqueId)
// userSchema.plugin(searchKeyFilterPlugin, ["uniqueId", "email"]);

// Index for faster search on searchKey
// userSchema.index({ searchKey: 1 });
userSchema.pre('save', async function (next) {
  if (!this.isNew) return next(); // Only run on new docs

  try {
    const counter = await Counter.findByIdAndUpdate(
      { _id: 'user' },
      { $inc: { sequenceValue: 1 } },
      { new: true, upsert: true } // create if not exists
    );
    this.uniqueId = counter.sequenceValue;
    next();
  } catch (err) {
    console.log(err)
  }
});


// Create and export the Mongoose model for user
const User = mongoose.model<IUserModel>("user", userSchema);

export default User;
